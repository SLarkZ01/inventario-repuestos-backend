
--- PAGE 1 ---

Universidad Auto´noma del Cauca
BASES DE DATOS AVANZADAS
S F ´ I
ISTEMA DE ACTURACION E NVENTARIO
PARA TALLERES DE MOTOS
Spring Boot + MongoDB + Next.js
Integrantes:
Daniel Rivas Agredo
Janer Esteban Pechene
Adrian Daniel Pelaez
Thomas Montoya Magon
Docente:
Diego Fernando Prado Osorio
17 de septiembre de 2025

--- PAGE 2 ---

´Indice
1. Definicio´ndelaIdeayObjetivo 3
1.1. Identificacio´ndelProblema . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.2. Pu´blicoObjetivo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
1.3. ObjetivosPrincipales . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 3
2. Ana´lisisyPlanificacio´n 3
2.1. RequisitosFuncionales . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2.1.1. Gestio´ndeInventario . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2.1.2. Gestio´ndeVentas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2.1.3. Gestio´nFinanciera . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2.1.4. ReportesyAnalytics . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 4
2.1.5. Gestio´ndeUsuarios . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.2. RequisitosNoFuncionales . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.2.1. Performance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.2.2. Seguridad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.2.3. Usabilidad. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.2.4. Escalabilidad . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.3. Definicio´ndelAlcance . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.3.1. MVP(ProductoM´ınimoViable) . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 5
2.3.2. FuncionalidadesFuturas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
3. Disen˜odelaArquitectura 6
3.1. ArquitecturadelSistema . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
3.1.1. Patro´nArquitecto´nico . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 6
3.2. Tecnolog´ıasSeleccionadas . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3.2.1. Backend. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3.2.2. BasedeDatos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3.2.3. HerramientasdeDesarrollo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 7
3.3. Disen˜odeBasedeDatos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
3.3.1. Coleccio´n:usuarios . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
3.3.2. Coleccio´n:categorias . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
3.3.3. Coleccio´n:productos. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 8
3.3.4. Coleccio´n:proveedores . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
3.3.5. Coleccio´n:clientes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 9
3.3.6. Coleccio´n:facturas venta . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 10
3.3.7. Coleccio´n:facturas compra . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
3.3.8. Coleccio´n:movimientos inventario . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
3.3.9. Coleccio´n:cierres caja . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 11
3.3.10.Coleccio´n:gastos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
3.3.11.Coleccio´n:configuracion. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
3.4. ´IndicesdeBasedeDatos . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 12
4. CasosdeUsoPrincipales 13
4.1. UC-01:RealizarVenta . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
4.2. UC-02:GestionarInventario . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 13
4.3. UC-03:CerrarCaja. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
4.4. UC-04:GenerarReportes . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
5. ConclusionesyPro´ximosPasos 14
1

--- PAGE 3 ---

5.1. BeneficiosEsperados . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
5.2. CronogramadeDesarrollo . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
5.3. ConsideracionesTe´cnicas. . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . 14
2

--- PAGE 4 ---

UniversidadAuto´nomadelCauca
1 Definicio´n de la Idea y Objetivo
1.1 Identificacio´n del Problema
Lostalleresdeventaderepuestosdemotosenfrentandesaf´ıossignificativosenlagestio´ndesuinventario
yfacturacio´n.Estosnegociosrequierenuncontrolprecisodeexistencias,manejoeficientedeproveedores,
ca´lculoautoma´ticodepreciosconIVA,ygeneracio´ndereportesparalatomadedecisiones.Lafaltadeun
sistemaintegradoresultaenpe´rdidasecono´micas,erroresenfacturacio´nydificultadesparamantenerun
inventarioo´ptimo.
1.2 Pu´blico Objetivo
UsuariosPrimarios:
Propietariosyadministradoresdetalleresderepuestosdemotos
Vendedoresycajerosdelestablecimiento
Personalencargadodeinventarioycompras
UsuariosSecundarios:
Contadoresypersonalfinanciero
Proveedoresquerequiereninformacio´ndepedidos
Clientesquenecesitanconsultardisponibilidad
1.3 Objetivos Principales
ObjetivoGeneral:Desarrollarunsistemaintegraldefacturacio´neinventarioqueautomaticelosprocesos
deventa,controldestockygestio´nfinancieraparatalleresderepuestosdemotos.
ObjetivosEspec´ıficos:
Implementarunsistemadeinventarioentiemporealconalertasdebajostock
Automatizarelca´lculodepreciosdeventaconIVAsobreelcosto
Generarfacturasdigitalesconcumplimientonormativo
Facilitarelcierredecajadiarioyconciliacio´ndeventas
Proporcionarreportesdeventasyana´lisisdenegocio
Gestionarcuentasporpagaraproveedores
Ofrecerunaarquitecturaescalableparafuturasexpansiones
2 Ana´lisis y Planificacio´n
3

--- PAGE 5 ---

UniversidadAuto´nomadelCauca
2.1 Requisitos Funcionales
2.1.1. Gestio´ndeInventario
RF-01:Cargainicialdeinventarioconpreciosdecosto
RF-02:Consultadeexistenciasporproducto,categor´ıaoco´digo
RF-03:Actualizacio´nautoma´ticadestockporventas
RF-04:Alertasautoma´ticasparaproductosconbajasexistencias
RF-05:Gestio´ndecategor´ıasysubcategor´ıasderepuestos
RF-06:Controldeentradademercanc´ıaporcompras
2.1.2. Gestio´ndeVentas
RF-07:Creacio´ndefacturasdeventaconca´lculoautoma´ticodeIVA
RF-08:Bu´squedara´pidadeproductosdurantelaventa
RF-09:Aplicacio´ndedescuentosypromociones
RF-10:Registrodediferentesme´todosdepago
RF-11:Anulacio´nydevolucionesdeventas
RF-12:Generacio´ndecomprobantesdeventa
2.1.3. Gestio´nFinanciera
RF-13:Cierredecajadiarioconconsolidadodeventas
RF-14:Registrodegastosyegresosdelnegocio
RF-15:Controldecuentasporcobraraclientes
RF-16:Gestio´ndecuentasporpagaraproveedores
RF-17:Cargadefacturasdecompraconestadodepago
2.1.4. ReportesyAnalytics
RF-18:Reportesdeventasdiarios,semanalesymensuales
RF-19:Ana´lisisdeproductosma´svendidosyrentabilidad
RF-20:Reportesdeproductosconbajostock
RF-21:Estadodecuentasporpagaraproveedores
RF-22:Ana´lisisdetendenciasdeventas
RF-23:Exportacio´ndereportesenformatosPDFyExcel
4

--- PAGE 6 ---

UniversidadAuto´nomadelCauca
2.1.5. Gestio´ndeUsuarios
RF-24:Autenticacio´nyautorizacio´ndeusuarios
RF-25:Rolesypermisosdiferenciados(Administrador,Vendedor,Cajero)
RF-26:Registrodeactividadesporusuario
RF-27:Gestio´ndesesionesyseguridad
2.2 Requisitos No Funcionales
2.2.1. Performance
RNF-01:Tiempoderespuestamenora2segundosparaconsultas
RNF-02:Soporteparaalmenos50usuariosconcurrentes
RNF-03:Disponibilidaddelsistemadel99.5%
2.2.2. Seguridad
RNF-04:Encriptacio´ndecontrasen˜asconbcrypt
RNF-05:Implementacio´ndeJWTparaautenticacio´n
RNF-06:Validacio´ndeentradadedatosparaprevenirinyecciones
RNF-07:Backupautoma´ticodebasededatos
2.2.3. Usabilidad
RNF-08:Interfazintuitivayfa´cildeusar
RNF-09:Responsivedesignparadispositivosmo´viles
RNF-10:Soporteparanavegadoresmodernos
2.2.4. Escalabilidad
RNF-11:Arquitecturamodularparafuturasexpansiones
RNF-12:APIRESTbiendocumentadaparaintegraciones
RNF-13:Separacio´nclaraentrefrontendybackend
2.3 Definicio´n del Alcance
2.3.1. MVP(ProductoM´ınimoViable)
ElMVPincluira´ lasfuncionalidadesesencialesparaelfuncionamientoba´sicodeltaller:
Gestio´nba´sicadeinventario(productos,categor´ıas,stock)
5

--- PAGE 7 ---

UniversidadAuto´nomadelCauca
Sistemadeventasconfacturacio´nyca´lculodeIVA
Cierredecajadiario
Reportesba´sicosdeventasyexistencias
Gestio´ndeusuariosconrolesba´sicos
Paneldeadministracio´nweb
2.3.2. FuncionalidadesFuturas
Paraversionesposterioresseconsiderara´n:
Aplicacio´nmo´vilnativa
Integracio´nconsistemasdefacturacio´nelectro´nica
Mo´dulodeCRMparagestio´ndeclientes
Sistemadefidelizacio´nypromocionesavanzadas
Integracio´nconplataformasdee-commerce
Analyticsavanzadosconmachinelearning
Mo´dulodecomprasautomatizadas
3 Disen˜o de la Arquitectura
3.1 Arquitectura del Sistema
3.1.1. Patro´nArquitecto´nico
Seadoptara´ unaarquitecturademicroserviciosligeraconseparacio´nclaraderesponsabilidades:
Backend(SpringBoot):
APIRESTconSpringWeb
SeguridadconSpringSecurityyJWT
Validacio´ndedatosconSpringValidation
Documentacio´nautoma´ticaconSwagger/OpenAPI
Manejodeexcepcionescentralizado
BasedeDatos(MongoDB):
BasededatosNoSQLparaflexibilidaddeesquemas
Coleccionesoptimizadasparaconsultasfrecuentes
´Indicesestrate´gicosparamejorarperformance
Agregacionesparareportescomplejos
FrontendFuturo(Next.js+TypeScript):
SinglePageApplication(SPA)conserver-siderendering
6

--- PAGE 8 ---

UniversidadAuto´nomadelCauca
Componentesreutilizablesytipadoesta´tico
StatemanagementconReactContextoZustand
InterfazresponsiveconTailwindCSS
3.2 Tecnolog´ıas Seleccionadas
3.2.1. Backend
FrameworkPrincipal:
SpringBoot3.1.x-Frameworkprincipalparadesarrollora´pido
SpringDataMongoDB-Accesoadatossimplificado
SpringSecurity-Autenticacio´nyautorizacio´n
SpringValidation-Validacio´ndedatosdeentrada
DependenciasAdicionales:
JWT(jsonwebtoken)-Manejodetokensdeautenticacio´n
BCrypt-Encriptacio´ndecontrasen˜as
SpringDocOpenAPI-Documentacio´nautoma´ticadeAPI
Jackson-Serializacio´nJSON
Lombok-Reduccio´ndeco´digoboilerplate
3.2.2. BasedeDatos
MongoDB6.x
Basededatosorientadaadocumentos
Escalabilidadhorizontal
Flexibilidadenesquemasdedatos
SoportenativoparaJSON/BSON
Potentescapacidadesdeagregacio´n
3.2.3. HerramientasdeDesarrollo
Java17-Versio´nLTSconfeaturesmodernas
Maven-Gestio´ndedependenciasybuild
Docker-Contenerizacio´nparadespliegue
MongoDBCompass-Interfazgra´ficaparabasededatos
Postman-TestingdeAPIs
Git-Controldeversiones
7

--- PAGE 9 ---

UniversidadAuto´nomadelCauca
3.3 Disen˜o de Base de Datos
3.3.1. Coleccio´n:usuarios
{
"_id": ObjectId,
"username": String,
"email": String,
"password": String, // Hash con bcrypt
"nombre": String,
"apellido": String,
"rol": String, // "ADMIN", "VENDEDOR", "CAJERO"
"activo": Boolean,
"fechaCreacion": Date,
"fechaUltimaConexion": Date,
"permisos": [String] // Lista de permisos espec´ıficos
}
3.3.2. Coleccio´n:categorias
{
"_id": ObjectId,
"nombre": String,
"descripcion": String,
"categoria_padre": ObjectId, // null si es categor´ıa principal
"activa": Boolean,
"fechaCreacion": Date,
"imagen": String // URL de imagen opcional
}
3.3.3. Coleccio´n:productos
{
"_id": ObjectId,
"codigo": String, // C´odigo ´unico del producto
"nombre": String,
"descripcion": String,
"categoria_id": ObjectId,
"marca": String,
"modelo": String,
"a~no_compatible": [Number], // A~nos de motos compatibles
"precio_costo": Number,
"margen_ganancia": Number, // Porcentaje
"precio_venta": Number, // Calculado autom´aticamente
"iva": Number, // Porcentaje de IVA
"stock_actual": Number,
"stock_minimo": Number,
"stock_maximo": Number,
"unidad_medida": String, // "UNIDAD", "METRO", "LITRO", etc.
"ubicacion": String, // Ubicaci´on f´ısica en el taller
8

--- PAGE 10 ---

UniversidadAuto´nomadelCauca
"proveedor_principal": ObjectId,
"proveedores_alternativos": [ObjectId],
"activo": Boolean,
"fecha_creacion": Date,
"fecha_modificacion": Date,
"imagenes": [String], // URLs de im´agenes
"peso": Number,
"dimensiones": {
"largo": Number,
"ancho": Number,
"alto": Number
},
"garantia_meses": Number
}
3.3.4. Coleccio´n:proveedores
{
"_id": ObjectId,
"nit": String,
"razon_social": String,
"nombre_comercial": String,
"contacto": {
"nombre": String,
"telefono": String,
"email": String,
"celular": String
},
"direccion": {
"calle": String,
"ciudad": String,
"departamento": String,
"codigo_postal": String
},
"informacion_bancaria": {
"banco": String,
"tipo_cuenta": String,
"numero_cuenta": String
},
"terminos_pago": String, // "CONTADO", "30_DIAS", "60_DIAS"
"descuento_proveedor": Number, // Porcentaje
"activo": Boolean,
"fecha_registro": Date,
"calificacion": Number, // 1-5 estrellas
"notas": String
}
3.3.5. Coleccio´n:clientes
{
9

--- PAGE 11 ---

UniversidadAuto´nomadelCauca
"_id": ObjectId,
"tipo_documento": String, // "CC", "NIT", "CE"
"numero_documento": String,
"nombre": String,
"apellido": String,
"razon_social": String, // Para empresas
"telefono": String,
"celular": String,
"email": String,
"direccion": {
"calle": String,
"ciudad": String,
"departamento": String
},
"fecha_registro": Date,
"fecha_ultima_compra": Date,
"total_compras": Number,
"activo": Boolean,
"tipo_cliente": String // "NATURAL", "EMPRESA"
}
3.3.6. Coleccio´n:facturas venta
{
"_id": ObjectId,
"numero_factura": String, // Secuencial
"cliente_id": ObjectId,
"usuario_id": ObjectId, // Quien registr´o la venta
"fecha_venta": Date,
"items": [{
"producto_id": ObjectId,
"codigo_producto": String,
"nombre_producto": String,
"cantidad": Number,
"precio_unitario": Number,
"descuento": Number,
"subtotal": Number,
"iva": Number,
"total_item": Number
}],
"subtotal": Number,
"descuento_general": Number,
"iva_total": Number,
"total_factura": Number,
"metodo_pago": String, // "EFECTIVO", "TARJETA", "TRANSFERENCIA"
"estado": String, // "PAGADA", "ANULADA", "DEVUELTA"
"observaciones": String,
"fecha_anulacion": Date,
"motivo_anulacion": String
}
10

--- PAGE 12 ---

UniversidadAuto´nomadelCauca
3.3.7. Coleccio´n:facturas compra
{
"_id": ObjectId,
"numero_factura": String,
"proveedor_id": ObjectId,
"fecha_compra": Date,
"fecha_vencimiento": Date,
"items": [{
"producto_id": ObjectId,
"cantidad": Number,
"precio_costo": Number,
"descuento": Number,
"subtotal": Number,
"iva": Number,
"total_item": Number
}],
"subtotal": Number,
"iva_total": Number,
"total_factura": Number,
"estado_pago": String, // "PENDIENTE", "PAGADA", "VENCIDA"
"fecha_pago": Date,
"metodo_pago": String,
"referencia_pago": String,
"descuento_pronto_pago": Number,
"observaciones": String,
"usuario_registro": ObjectId
}
3.3.8. Coleccio´n:movimientos inventario
{
"_id": ObjectId,
"producto_id": ObjectId,
"tipo_movimiento": String, // "ENTRADA", "SALIDA", "AJUSTE"
"cantidad": Number, // Positivo para entrada, negativo para salida
"stock_anterior": Number,
"stock_nuevo": Number,
"motivo": String, // "VENTA", "COMPRA", "DEVOLUCION", "AJUSTE"
"referencia_id": ObjectId, // ID de la factura relacionada
"usuario_id": ObjectId,
"fecha_movimiento": Date,
"observaciones": String,
"costo_unitario": Number // Para c´alculo de inventarios
}
3.3.9. Coleccio´n:cierres caja
{
"_id": ObjectId,
11

--- PAGE 13 ---

UniversidadAuto´nomadelCauca
"fecha_cierre": Date,
"usuario_id": ObjectId,
"saldo_inicial": Number,
"ventas_efectivo": Number,
"ventas_tarjeta": Number,
"ventas_transferencia": Number,
"total_ventas": Number,
"gastos": Number,
"saldo_final_teorico": Number,
"saldo_final_fisico": Number,
"diferencia": Number,
"facturas_vendidas": [ObjectId],
"observaciones": String,
"estado": String, // "ABIERTO", "CERRADO"
}
3.3.10. Coleccio´n:gastos
{
"_id": ObjectId,
"concepto": String,
"categoria": String, // "SERVICIOS", "SUMINISTROS", "NOMINA", etc.
"valor": Number,
"fecha_gasto": Date,
"proveedor": String,
"numero_factura": String,
"metodo_pago": String,
"usuario_id": ObjectId,
"observaciones": String,
"fecha_registro": Date
}
3.3.11. Coleccio´n:configuracion
{
"_id": ObjectId,
"clave": String, // "IVA_GENERAL", "MONEDA", "EMPRESA_INFO", etc.
"valor": String,
"descripcion": String,
"tipo": String, // "NUMBER", "STRING", "BOOLEAN"
"fecha_modificacion": Date,
"usuario_modificacion": ObjectId
}
3.4 ´Indices de Base de Datos
Paraoptimizarelrendimientodelasconsultasma´sfrecuentes:
Productos:
12

--- PAGE 14 ---

UniversidadAuto´nomadelCauca
´Indiceu´nicoencodigo
´Indicecompuestoencategoria id, activo
´Indicedetextoennombre, descripcion, marca
´Indiceenstock actualparaconsultasdebajostock
FacturasdeVenta:
´Indiceu´nicoennumero factura
´Indicecompuestoenfecha venta, estado
´Indiceencliente id
´Indiceenusuario id
MovimientosdeInventario:
´Indicecompuestoenproducto id, fecha movimiento
´Indiceentipo movimiento
´Indiceenusuario id
4 Casos de Uso Principales
4.1 UC-01: Realizar Venta
Actor:Vendedor/Cajero
Descripcio´n:Procesocompletodeventadesdelabu´squedadeproductoshastalageneracio´ndefactura.
FlujoPrincipal:
1. Elusuariobuscaproductosporco´digo,nombreocategor´ıa
2. Seleccionalosproductosyespecificacantidades
3. Elsistemacalculaautoma´ticamentepreciosconIVA
4. Aplicadescuentossicorresponde
5. Registrainformacio´ndelcliente
6. Seleccioname´tododepago
7. Generafacturayactualizainventario
8. Imprimecomprobantedeventa
4.2 UC-02: Gestionar Inventario
Actor:Administrador
Descripcio´n:Administracio´ncompletadelinventarioincluyendoproductos,categor´ıasycontroldestock.
13

--- PAGE 15 ---

UniversidadAuto´nomadelCauca
4.3 UC-03: Cerrar Caja
Actor:Cajero/Administrador
Descripcio´n:Procesodecierrediarioconconciliacio´ndeventasyefectivo.
4.4 UC-04: Generar Reportes
Actor:Administrador
Descripcio´n:Generacio´ndereportesdeventas,inventarioyana´lisisdenegocio.
5 Conclusiones y Pro´ximos Pasos
5.1 Beneficios Esperados
El sistema proporcionara´ un control integral sobre las operaciones del taller, mejorando la eficiencia ope-
rativa, reduciendo errores manuales y proporcionando informacio´n valiosa para la toma de decisiones. La
arquitecturamodularpermitira´ futurasexpansionesylaseparacio´nfrontend-backendfacilitara´ eldesarrollo
deaplicacionesmo´viles.
5.2 Cronograma de Desarrollo
Fase1(4semanas):Configuracio´ndelproyecto,modelosdedatosyAPIsba´sicas
Fase2(3semanas):Mo´dulosdeinventarioyventas
Fase3(2semanas):Reportesycierredecaja
Fase4(2semanas):Testing,documentacio´nydespliegue
5.3 Consideraciones Te´cnicas
La eleccio´n de MongoDB como base de datos NoSQL proporcionara´ la flexibilidad necesaria para adap-
tarse a diferentes tipos de repuestos y estructuras de datos variables. Spring Boot ofrecera´ un desarrollo
ra´pidoyrobustodelbackend,mientrasquelaarquitecturaAPIRESTfacilitara´ futurasintegraciones.
14