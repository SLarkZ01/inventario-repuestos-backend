openapi: 3.0.1
info:
  title: RepoBackend API
  description: API para gestión de inventario y ventas (productos, stock, carritos,
    facturas, talleres, favoritos)
  contact:
    name: Equipo RepoBackend
    email: devs@example.com
  license:
    name: Proprietary
  version: 0.0.1
servers:
- url: /
  description: Servidor local / producción (configurable)
security:
- bearerAuth: []
tags:
- name: TallerMiembros
  description: Operaciones sobre miembros de taller (promover, demover, remover)
- name: Categorias
  description: Gestión de categorías de productos
- name: Stock
  description: Operaciones para gestionar inventario por almacén
- name: Facturas
  description: Creación y consulta de facturas
- name: Auth
  description: Autenticación y gestión de tokens
- name: Favoritos
  description: Operaciones para gestionar productos favoritos del usuario
- name: AdminUsers
  description: Creación de administradores
- name: Productos
  description: Operaciones para gestionar productos
- name: Talleres
  description: Administración de talleres, almacenes e invitaciones
- name: Carritos
  description: Operaciones sobre carritos de compra
- name: Movimientos
  description: Registro de entradas y salidas de stock
paths:
  /api/stock/set:
    put:
      tags:
      - Stock
      summary: Setear stock
      description: Establece la cantidad exacta de stock en un almacén específico
        (reemplaza el valor anterior)
      operationId: set
      requestBody:
        description: Cantidad exacta a establecer
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
            examples:
              Establecer stock:
                description: Establecer stock
                value:
                  productoId: 507f191e810c19729de860ea
                  almacenId: 507faaa1bcf86cd799439011
                  cantidad: 100
        required: true
      responses:
        '200':
          description: Stock establecido exitosamente
          content:
            application/json:
              example:
                success: true
                cantidad: 100
        '400':
          description: Datos inválidos
  /api/productos/{id}:
    get:
      tags:
      - Productos
      summary: Obtener producto por ID
      description: Devuelve los detalles completos de un producto
      operationId: getProducto
      parameters:
      - name: id
        in: path
        description: ID del producto
        required: true
        schema:
          type: string
        example: 507f191e810c19729de860ea
      responses:
        '200':
          description: Producto encontrado
          content:
            application/json:
              example:
                producto:
                  id: 507f191e810c19729de860ea
                  nombre: Filtro de Aceite Yamaha
                  precio: 25.5
                  stock: 100
                  categoriaId: 507f1f77bcf86cd799439011
        '404':
          description: Producto no encontrado
    put:
      tags:
      - Productos
      summary: Actualizar producto
      description: Actualiza los datos del producto. Envía solo los campos que deseas
        actualizar.
      operationId: actualizarProducto
      parameters:
      - name: id
        in: path
        description: ID del producto
        required: true
        schema:
          type: string
        example: 507f191e810c19729de860ea
      requestBody:
        description: Datos actualizados del producto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductoRequest'
            example:
              nombre: Filtro de Aceite Yamaha R15
              precio: 27.0
              stock: 150
        required: true
      responses:
        '200':
          description: Producto actualizado exitosamente
          content:
            application/json:
              example:
                producto:
                  id: 507f191e810c19729de860ea
                  nombre: Filtro de Aceite Yamaha R15
                  precio: 27.0
        '404':
          description: Producto no encontrado
    delete:
      tags:
      - Productos
      summary: Eliminar producto
      description: Elimina un producto por ID
      operationId: eliminar
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Producto eliminado
        '404':
          description: Producto no encontrado
  /api/categorias/{id}:
    get:
      tags:
      - Categorias
      summary: Obtener categoría
      operationId: getCategoria
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Categoría encontrada
        '404':
          description: No encontrada
    put:
      tags:
      - Categorias
      summary: Actualizar categoría
      operationId: actualizarCategoria
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoriaRequest'
        required: true
      responses:
        '200':
          description: Categoría actualizada
        '404':
          description: No encontrada
    delete:
      tags:
      - Categorias
      summary: Eliminar categoría
      operationId: eliminar_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Eliminada
        '404':
          description: No encontrada
  /api/talleres:
    get:
      tags:
      - Talleres
      summary: Listar talleres propios
      description: Lista los talleres donde el usuario es owner
      operationId: listMyTalleres
      responses:
        '200':
          description: Lista de talleres
    post:
      tags:
      - Talleres
      summary: Crear taller
      description: Crea un taller y lo asocia al usuario autenticado como propietario
        (owner)
      operationId: crearTaller
      requestBody:
        description: Datos del taller
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            examples:
              Nuevo taller:
                description: Nuevo taller
                value:
                  nombre: Taller Motos del Norte
        required: true
      responses:
        '201':
          description: Taller creado exitosamente
          content:
            application/json:
              example:
                taller:
                  id: 507f1f77bcf86cd799439777
                  nombre: Taller Motos del Norte
                  ownerId: 507f1f77bcf86cd799439011
        '401':
          description: Usuario no autenticado
  /api/talleres/{tallerId}/miembros/{memberUserId}/promote:
    post:
      tags:
      - TallerMiembros
      summary: Promover miembro a ADMIN
      description: Otorga permisos de administrador a un miembro del taller. Solo
        puede hacerlo el owner o un miembro ADMIN.
      operationId: promote
      parameters:
      - name: tallerId
        in: path
        description: ID del taller
        required: true
        schema:
          type: string
        example: 507f1f77bcf86cd799439777
      - name: memberUserId
        in: path
        description: ID del usuario a promover
        required: true
        schema:
          type: string
        example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Miembro promovido exitosamente
          content:
            application/json:
              example:
                success: true
                userId: 507f1f77bcf86cd799439011
                newRole: ADMIN
                message: Usuario promovido a ADMIN
        '401':
          description: Usuario no autenticado
        '403':
          description: No tienes permisos para esta operación
        '404':
          description: Taller o miembro no encontrado
  /api/talleres/{tallerId}/miembros/{memberUserId}/demote:
    post:
      tags:
      - TallerMiembros
      summary: Demover miembro (remover rol ADMIN)
      description: Remueve los permisos de administrador a un miembro del taller.
        Solo puede hacerlo el owner.
      operationId: demote
      parameters:
      - name: tallerId
        in: path
        description: ID del taller
        required: true
        schema:
          type: string
        example: 507f1f77bcf86cd799439777
      - name: memberUserId
        in: path
        description: ID del usuario a demover
        required: true
        schema:
          type: string
        example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Miembro demovido exitosamente
          content:
            application/json:
              example:
                success: true
                userId: 507f1f77bcf86cd799439011
                newRole: VENDEDOR
                message: Permisos de ADMIN removidos
        '401':
          description: Usuario no autenticado
        '403':
          description: No tienes permisos para esta operación
        '404':
          description: Taller o miembro no encontrado
  /api/talleres/{tallerId}/invitaciones/codigo:
    post:
      tags:
      - Talleres
      summary: Crear invitación por código
      description: 'Genera un código de invitación para que usuarios puedan unirse
        a un taller. Roles disponibles: VENDEDOR, ADMIN, MECANICO.'
      operationId: crearInvitacionCodigo
      parameters:
      - name: tallerId
        in: path
        description: ID del taller
        required: true
        schema:
          type: string
        example: 507f1f77bcf86cd799439777
      requestBody:
        description: Configuración de la invitación
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
            examples:
              Invitación de vendedor:
                description: Invitación de vendedor
                value:
                  role: VENDEDOR
                  daysValid: 7
              Invitación de admin:
                description: Invitación de admin
                value:
                  role: ADMIN
                  daysValid: 30
        required: true
      responses:
        '201':
          description: Invitación creada exitosamente
          content:
            application/json:
              example:
                invitacion:
                  code: TALLER-ABC123XYZ
                  role: VENDEDOR
                  expiresAt: '2024-11-06T10:30:00Z'
        '401':
          description: Usuario no autenticado
  /api/talleres/{tallerId}/almacenes:
    post:
      tags:
      - Talleres
      summary: Crear almacén en taller
      description: Crea un almacén dentro de un taller existente. Solo el owner o
        administradores del taller pueden crear almacenes.
      operationId: crearAlmacen
      parameters:
      - name: tallerId
        in: path
        description: ID del taller
        required: true
        schema:
          type: string
        example: 507f1f77bcf86cd799439777
      requestBody:
        description: Datos del almacén
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            examples:
              Nuevo almacén:
                description: Nuevo almacén
                value:
                  nombre: Almacén Principal
                  ubicacion: Calle 123, Local 5
        required: true
      responses:
        '201':
          description: Almacén creado exitosamente
          content:
            application/json:
              example:
                almacen:
                  id: 507faaa1bcf86cd799439011
                  nombre: Almacén Principal
                  ubicacion: Calle 123, Local 5
                  tallerId: 507f1f77bcf86cd799439777
        '401':
          description: Usuario no autenticado
  /api/talleres/invitaciones/accept:
    post:
      tags:
      - Talleres
      summary: Aceptar invitación por código
      description: Permite a un usuario autenticado unirse a un taller usando un código
        de invitación válido
      operationId: acceptInvitacion
      requestBody:
        description: Código de invitación
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            examples:
              Aceptar invitación:
                description: Aceptar invitación
                value:
                  code: TALLER-ABC123XYZ
        required: true
      responses:
        '200':
          description: Invitación aceptada exitosamente
          content:
            application/json:
              example:
                success: true
                tallerId: 507f1f77bcf86cd799439777
                role: VENDEDOR
                message: Te has unido al taller exitosamente
        '400':
          description: Código inválido o expirado
        '401':
          description: Usuario no autenticado
  /api/stock/adjust:
    post:
      tags:
      - Stock
      summary: Ajustar stock (delta)
      description: Aumenta o disminuye el stock en un almacén específico. Use valores
        positivos para aumentar y negativos para disminuir.
      operationId: adjust
      requestBody:
        description: Datos del ajuste
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
            examples:
              Aumentar stock:
                description: Aumentar stock
                value:
                  productoId: 507f191e810c19729de860ea
                  almacenId: 507faaa1bcf86cd799439011
                  delta: 50
              Disminuir stock:
                description: Disminuir stock
                value:
                  productoId: 507f191e810c19729de860ea
                  almacenId: 507faaa1bcf86cd799439011
                  delta: -10
        required: true
      responses:
        '200':
          description: Stock ajustado exitosamente
          content:
            application/json:
              example:
                success: true
                nuevaCantidad: 140
        '400':
          description: Datos inválidos
  /api/productos:
    get:
      tags:
      - Productos
      summary: Listar productos
      description: Devuelve una lista paginada de productos. Soporta búsqueda por
        nombre (q) o filtrado por categoría (categoriaId).
      operationId: listar
      parameters:
      - name: q
        in: query
        description: Búsqueda por nombre de producto
        required: false
        schema:
          type: string
        example: filtro
      - name: categoriaId
        in: query
        description: ID de la categoría para filtrar
        required: false
        schema:
          type: string
        example: 507f1f77bcf86cd799439011
      - name: page
        in: query
        description: Número de página (base 0)
        required: false
        schema:
          type: integer
          format: int32
          default: 0
        example: 0
      - name: size
        in: query
        description: Cantidad de elementos por página
        required: false
        schema:
          type: integer
          format: int32
          default: 20
        example: 20
      responses:
        '200':
          description: Lista de productos paginada
          content:
            application/json:
              example:
                content:
                - id: 507f191e810c19729de860ea
                  nombre: Filtro de Aceite
                  precio: 25.5
                page: 0
                size: 20
                totalElements: 45
                totalPages: 3
    post:
      tags:
      - Productos
      summary: Crear producto
      description: Crea un nuevo producto en el inventario
      operationId: crearProducto
      requestBody:
        description: Datos del producto
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/ProductoRequest'
            examples:
              Ejemplo de producto:
                description: Ejemplo de producto
                value:
                  nombre: Filtro de Aceite Yamaha
                  descripcion: Filtro de aceite para motos Yamaha 150cc
                  precio: 25.5
                  stock: 100
                  categoriaId: 507f1f77bcf86cd799439011
                  specs:
                    Marca: Yamaha
                    Modelo: YZF-R15
                    Compatibilidad: 150cc
        required: true
      responses:
        '201':
          description: Producto creado exitosamente
          content:
            application/json:
              example:
                producto:
                  id: 507f191e810c19729de860ea
                  nombre: Filtro de Aceite Yamaha
                  precio: 25.5
                  stock: 100
        '400':
          description: Datos inválidos
  /api/movimientos:
    get:
      tags:
      - Movimientos
      summary: Listar movimientos
      description: Lista movimientos de stock. Puede filtrarse por producto o por
        tipo de movimiento.
      operationId: listar_1
      parameters:
      - name: productoId
        in: query
        description: ID del producto para filtrar
        required: false
        schema:
          type: string
        example: 507f191e810c19729de860ea
      - name: tipo
        in: query
        description: Tipo de movimiento (INGRESO, EGRESO, VENTA, DEVOLUCION, AJUSTE)
        required: false
        schema:
          type: string
        example: INGRESO
      responses:
        '200':
          description: Lista de movimientos
          content:
            application/json:
              example:
                movimientos:
                - id: 507f191e810c19729de860eb
                  tipo: INGRESO
                  productoId: 507f191e810c19729de860ea
                  cantidad: 50
                  fecha: '2024-10-30T10:30:00Z'
    post:
      tags:
      - Movimientos
      summary: Crear movimiento
      description: 'Registra una entrada (INGRESO) o salida (EGRESO) de stock. Los
        tipos válidos son: INGRESO, EGRESO, VENTA, DEVOLUCION, AJUSTE.'
      operationId: crearMovimiento
      requestBody:
        description: Datos del movimiento
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MovimientoRequest'
            examples:
              Ingreso de mercancía:
                description: Ingreso de mercancía
                value:
                  tipo: INGRESO
                  productoId: 507f191e810c19729de860ea
                  cantidad: 50
                  referencia: OC-2024-001
                  notas: Compra a proveedor
                  realizadoPor: 507f1f77bcf86cd799439011
              Egreso por venta:
                description: Egreso por venta
                value:
                  tipo: VENTA
                  productoId: 507f191e810c19729de860ea
                  cantidad: 5
                  referencia: FAC-2024-123
                  notas: Venta cliente ABC
        required: true
      responses:
        '201':
          description: Movimiento creado exitosamente
          content:
            application/json:
              example:
                movimiento:
                  id: 507f191e810c19729de860eb
                  tipo: INGRESO
                  productoId: 507f191e810c19729de860ea
                  cantidad: 50
                  fecha: '2024-10-30T10:30:00Z'
        '400':
          description: Datos inválidos
  /api/favoritos/productos/{productoId}:
    post:
      tags:
      - Favoritos
      summary: Agregar producto a favoritos
      description: Añade un producto a la lista de favoritos del usuario autenticado
      operationId: add
      parameters:
      - name: productoId
        in: path
        description: ID del producto a agregar
        required: true
        schema:
          type: string
        example: 507f191e810c19729de860ea
      responses:
        '201':
          description: Favorito creado exitosamente
          content:
            application/json:
              example:
                favorito:
                  id: 507fabc123def456789012ab
                  productoId: 507f191e810c19729de860ea
                  usuarioId: 507f1f77bcf86cd799439011
                  fechaCreacion: '2024-10-30T10:30:00Z'
        '400':
          description: Solicitud inválida
        '401':
          description: Usuario no autenticado
        '404':
          description: Producto no encontrado
    delete:
      tags:
      - Favoritos
      summary: Remover producto de favoritos
      description: Remueve un producto de la lista de favoritos del usuario autenticado
      operationId: remove_1
      parameters:
      - name: productoId
        in: path
        description: ID del producto a remover
        required: true
        schema:
          type: string
        example: 507f191e810c19729de860ea
      responses:
        '200':
          description: Favorito removido exitosamente
          content:
            application/json:
              example:
                exito: true
                mensaje: Producto removido de favoritos
        '401':
          description: Usuario no autenticado
  /api/facturas:
    get:
      tags:
      - Facturas
      summary: Listar facturas por usuario
      operationId: listarPorUsuario
      parameters:
      - name: userId
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Lista de facturas
    post:
      tags:
      - Facturas
      summary: Crear factura (map)
      description: Crea una factura usando un payload genérico
      operationId: crearFactura
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
        required: true
      responses:
        '201':
          description: Factura creada
  /api/facturas/dto:
    post:
      tags:
      - Facturas
      summary: Crear factura (DTO)
      description: Crea una factura usando DTO tipado
      operationId: crearFacturaDTO
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/FacturaRequest'
        required: true
      responses:
        '201':
          description: Factura creada
          content:
            application/json:
              example:
                factura:
                  id: f1
                  total: 123.45
  /api/facturas/checkout:
    post:
      tags:
      - Facturas
      summary: Checkout carrito
      description: Crea una factura a partir de un carrito del usuario autenticado.
        Convierte los items del carrito en una factura y actualiza el stock.
      operationId: checkout
      requestBody:
        description: ID del carrito a facturar
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
            examples:
              Checkout:
                description: Checkout
                value:
                  carritoId: 507f1f77bcf86cd799439999
        required: true
      responses:
        '201':
          description: Factura creada exitosamente
          content:
            application/json:
              example:
                factura:
                  id: 507f1f77bcf86cd799439888
                  numeroFactura: FAC-2024-001
                  usuarioId: 507f1f77bcf86cd799439011
                  total: 127.5
                  fecha: '2024-10-30T10:30:00Z'
                  items:
                  - productoId: 507f191e810c19729de860ea
                    cantidad: 5
                    precioUnitario: 25.5
        '400':
          description: Carrito inválido o vacío
        '401':
          description: Usuario no autenticado
        '409':
          description: Stock insuficiente
  /api/categorias:
    get:
      tags:
      - Categorias
      summary: Buscar/listar categorías
      description: Busca categorías por nombre. Si no se proporciona 'q', devuelve
        lista vacía.
      operationId: listar_2
      parameters:
      - name: q
        in: query
        description: Término de búsqueda para nombre de categoría
        required: false
        schema:
          type: string
        example: filtro
      - name: page
        in: query
        description: Número de página
        required: false
        schema:
          type: integer
          format: int32
          default: 0
        example: 0
      - name: size
        in: query
        description: Elementos por página
        required: false
        schema:
          type: integer
          format: int32
          default: 20
        example: 20
      responses:
        '200':
          description: Lista de categorías
          content:
            application/json:
              example:
                content:
                - id: 507f1f77bcf86cd799439011
                  nombre: Filtros
                totalElements: 1
    post:
      tags:
      - Categorias
      summary: Crear categoría
      description: Crea una nueva categoría de productos
      operationId: crearCategoria
      requestBody:
        description: Datos de la categoría
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CategoriaRequest'
            examples:
              Ejemplo de categoría:
                description: Ejemplo de categoría
                value:
                  nombre: Filtros
                  descripcion: Filtros de aceite, aire y combustible
                  iconoRecurso: 2131230988
        required: true
      responses:
        '201':
          description: Categoría creada exitosamente
          content:
            application/json:
              example:
                categoria:
                  id: 507f1f77bcf86cd799439011
                  nombre: Filtros
                  descripcion: Filtros de aceite, aire y combustible
        '400':
          description: Datos inválidos
  /api/carritos:
    get:
      tags:
      - Carritos
      summary: Listar carritos por usuario
      description: Devuelve los carritos asociados a un usuario
      operationId: listarPorUsuario_1
      parameters:
      - name: usuarioId
        in: query
        required: false
        schema:
          type: string
      responses:
        '200':
          description: Lista de carritos
    post:
      tags:
      - Carritos
      summary: Crear carrito
      description: Crea un carrito nuevo para un usuario o anónimo. Si se omite usuarioId,
        crea un carrito anónimo que puede sincronizarse después del login.
      operationId: crear
      requestBody:
        description: Datos del carrito
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarritoRequest'
            examples:
              Carrito con items:
                description: Carrito con items
                value:
                  usuarioId: 507f1f77bcf86cd799439011
                  items:
                  - productoId: 507f191e810c19729de860ea
                    cantidad: 2
                    precioUnitario: 25.5
              Carrito anónimo vacío:
                description: Carrito anónimo vacío
                value:
                  items: []
        required: true
      responses:
        '201':
          description: Carrito creado exitosamente
          content:
            application/json:
              example:
                carrito:
                  id: 507f1f77bcf86cd799439999
                  usuarioId: 507f1f77bcf86cd799439011
                  items: []
                  total: 0.0
        '400':
          description: Datos inválidos
  /api/carritos/{id}/items:
    post:
      tags:
      - Carritos
      summary: Agregar item a carrito
      description: Agrega un producto al carrito del usuario autenticado. Si el producto
        ya existe, actualiza la cantidad.
      operationId: addItem
      parameters:
      - name: id
        in: path
        description: ID del carrito
        required: true
        schema:
          type: string
        example: 507f1f77bcf86cd799439999
      requestBody:
        description: Item a agregar
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CarritoItemRequest'
            examples:
              Item de carrito:
                description: Item de carrito
                value:
                  productoId: 507f191e810c19729de860ea
                  cantidad: 2
                  precioUnitario: 25.5
        required: true
      responses:
        '200':
          description: Item agregado exitosamente
          content:
            application/json:
              example:
                carrito:
                  id: 507f1f77bcf86cd799439999
                  items:
                  - productoId: 507f191e810c19729de860ea
                    cantidad: 2
                  total: 51.0
        '401':
          description: Usuario no autenticado
        '403':
          description: No tienes permisos para modificar este carrito
        '404':
          description: Carrito no encontrado
  /api/carritos/{id}/clear:
    post:
      tags:
      - Carritos
      summary: Vaciar carrito
      description: Elimina todos los items del carrito
      operationId: clear
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Carrito vaciado
  /api/carritos/merge:
    post:
      tags:
      - Carritos
      summary: Merge de carrito anónimo
      description: Sincroniza un carrito anónimo al usuario autenticado tras el login.
        Combina items del carrito anónimo con el carrito del usuario.
      operationId: merge
      requestBody:
        description: ID del carrito anónimo y/o items a sincronizar
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
            examples:
              Merge de carrito:
                description: Merge de carrito
                value:
                  anonCartId: 507f1f77bcf86cd799439888
                  items:
                  - productoId: 507f191e810c19729de860ea
                    cantidad: 3
                    precioUnitario: 25.5
        required: true
      responses:
        '200':
          description: Merge realizado exitosamente
          content:
            application/json:
              example:
                merged: true
                carritoId: 507f1f77bcf86cd799439999
                totalItems: 5
        '401':
          description: Usuario no autenticado
  /api/auth/revoke-all:
    post:
      tags:
      - Auth
      summary: Revocar todos los refresh tokens
      description: Revoca todos los refresh tokens del usuario autenticado
      operationId: revokeAll
      responses:
        '200':
          description: Revocado
  /api/auth/register:
    post:
      tags:
      - Auth
      summary: Registro de usuario
      description: Registra un usuario nuevo en el sistema. Opcionalmente puede incluir
        un código de invitación para unirse a un taller.
      operationId: register
      requestBody:
        description: Datos del nuevo usuario
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RegisterRequest'
            examples:
              Ejemplo de registro:
                description: Ejemplo de registro
                value:
                  username: jperez
                  email: jperez@example.com
                  password: securePass123
                  nombre: Juan
                  apellido: Pérez
                  inviteCode: ABC123
        required: true
      responses:
        '200':
          description: Usuario creado exitosamente
          content:
            application/json:
              example:
                message: Usuario registrado exitosamente
                userId: 507f1f77bcf86cd799439011
        '400':
          description: Datos inválidos o usuario ya existe
  /api/auth/refresh:
    post:
      tags:
      - Auth
      summary: Refresh token
      description: Renueva el token de acceso usando un refresh token válido
      operationId: refresh
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            example:
              refreshToken: r1234567890abcdef
        required: true
      responses:
        '200':
          description: Tokens renovados
          content:
            application/json:
              example:
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                refreshToken: r9876543210fedcba
        '401':
          description: Refresh token inválido o expirado
  /api/auth/oauth/google:
    post:
      tags:
      - Auth
      summary: OAuth Google
      description: Autenticación/registro usando Google OAuth. Requiere el idToken
        obtenido del flujo OAuth de Google.
      operationId: oauthGoogle
      requestBody:
        description: Token de Google y datos opcionales
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            examples:
              Login con Google:
                description: Login con Google
                value:
                  idToken: eyJhbGciOiJSUzI1NiIsImtpZCI6IjAx...
                  inviteCode: TALLER-ABC123
                  device: android
        required: true
      responses:
        '200':
          description: OAuth exitoso
          content:
            application/json:
              example:
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                refreshToken: r1234567890
                user:
                  id: 507f1f77bcf86cd799439011
                  email: user@gmail.com
        '400':
          description: Token de Google inválido
  /api/auth/oauth/facebook:
    post:
      tags:
      - Auth
      summary: OAuth Facebook
      description: Autenticación/registro usando Facebook OAuth. Requiere el accessToken
        obtenido del flujo OAuth de Facebook.
      operationId: oauthFacebook
      requestBody:
        description: Token de Facebook y datos opcionales
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
            examples:
              Login con Facebook:
                description: Login con Facebook
                value:
                  accessToken: EAABwzLixnjYBO7ZC9bZB...
                  inviteCode: TALLER-ABC123
                  device: ios
        required: true
      responses:
        '200':
          description: OAuth exitoso
          content:
            application/json:
              example:
                accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                refreshToken: r1234567890
                user:
                  id: 507f1f77bcf86cd799439011
                  email: user@fb.com
        '400':
          description: Token de Facebook inválido
  /api/auth/logout:
    post:
      tags:
      - Auth
      summary: Logout
      description: Revoca el refresh token dado
      operationId: logout
      requestBody:
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: string
        required: true
      responses:
        '200':
          description: Logout realizado
  /api/auth/login:
    post:
      tags:
      - Auth
      summary: Login
      description: Inicia sesión con username/email y contraseña. Devuelve tokens
        JWT de acceso y refresh.
      operationId: login
      requestBody:
        description: Credenciales de acceso
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/LoginRequest'
            examples:
              Ejemplo de login:
                description: Ejemplo de login
                value:
                  usernameOrEmail: jperez
                  password: securePass123
                  device: web
        required: true
      responses:
        '200':
          description: Login exitoso
          content:
            application/json:
              examples:
                Respuesta exitosa:
                  description: Respuesta exitosa
                  value:
                    accessToken: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
                    refreshToken: r1234567890abcdef
                    user:
                      id: 507f1f77bcf86cd799439011
                      username: jperez
                      email: jperez@example.com
        '401':
          description: Credenciales inválidas
  /api/admin/users:
    post:
      tags:
      - AdminUsers
      summary: Crear administrador
      description: Crea un nuevo usuario con rol de administrador. Solo puede ser
        ejecutado por usuarios que ya son administradores.
      operationId: createAdmin
      requestBody:
        description: Datos del nuevo administrador
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/CreateAdminRequest'
            examples:
              Crear admin:
                description: Crear admin
                value:
                  username: admin.sistemas
                  email: admin@empresa.com
                  password: SecurePass123!
                  nombre: Juan
                  apellido: Administrador
        required: true
      responses:
        '201':
          description: Administrador creado exitosamente
          content:
            application/json:
              example:
                userId: 507f1f77bcf86cd799439011
                username: admin.sistemas
                email: admin@empresa.com
                role: ADMIN
                message: Administrador creado exitosamente
        '400':
          description: Datos inválidos o usuario ya existe
        '403':
          description: No tienes permisos para crear administradores
  /api/productos/{id}/stock:
    patch:
      tags:
      - Productos
      summary: Ajustar stock de producto
      description: Ajusta el stock del producto sumando o restando una cantidad (delta).
        Usa valores positivos para aumentar y negativos para disminuir.
      operationId: ajustarStock
      parameters:
      - name: id
        in: path
        description: ID del producto
        required: true
        schema:
          type: string
        example: 507f191e810c19729de860ea
      requestBody:
        description: Delta de ajuste de stock
        content:
          application/json:
            schema:
              type: object
              additionalProperties:
                type: object
            example:
              delta: 10
        required: true
      responses:
        '200':
          description: Stock ajustado exitosamente
          content:
            application/json:
              example:
                producto:
                  id: 507f191e810c19729de860ea
                  stock: 110
        '404':
          description: Producto no encontrado
  /api/stock:
    get:
      tags:
      - Stock
      summary: Obtener stock por producto
      description: Devuelve el stock disponible de un producto desglosado por almacén
        y el total consolidado
      operationId: getByProducto
      parameters:
      - name: productoId
        in: query
        description: ID del producto
        required: true
        schema:
          type: string
        example: 507f191e810c19729de860ea
      responses:
        '200':
          description: Stock obtenido exitosamente
          content:
            application/json:
              example:
                stockByAlmacen:
                - almacenId: 507faaa1bcf86cd799439011
                  almacenNombre: Principal
                  cantidad: 50
                - almacenId: 507fbbb1bcf86cd799439012
                  almacenNombre: Sucursal
                  cantidad: 30
                total: 80
    delete:
      tags:
      - Stock
      summary: Eliminar registro de stock
      description: Elimina el registro de stock para producto+almacén
      operationId: delete
      parameters:
      - name: productoId
        in: query
        required: true
        schema:
          type: string
      - name: almacenId
        in: query
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Registro eliminado
        '404':
          description: No encontrado
  /api/movimientos/{id}:
    get:
      tags:
      - Movimientos
      summary: Obtener movimiento por id
      description: Devuelve un movimiento por su id
      operationId: getMovimiento
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Movimiento encontrado
        '404':
          description: Movimiento no encontrado
  /api/favoritos:
    get:
      tags:
      - Favoritos
      summary: Listar favoritos
      description: Devuelve una lista paginada de productos favoritos del usuario
        autenticado
      operationId: list
      parameters:
      - name: page
        in: query
        description: Número de página (base 0)
        required: false
        schema:
          type: integer
          format: int32
          default: 0
        example: 0
      - name: size
        in: query
        description: Elementos por página
        required: false
        schema:
          type: integer
          format: int32
          default: 20
        example: 20
      responses:
        '200':
          description: Lista de favoritos
          content:
            application/json:
              example:
                favoritos:
                - id: 507fabc123def456789012ab
                  productoId: 507f191e810c19729de860ea
                  producto:
                    nombre: Filtro de Aceite
                    precio: 25.5
                page: 0
                size: 20
                total: 5
        '401':
          description: Usuario no autenticado
  /api/favoritos/productos/{productoId}/es-favorito:
    get:
      tags:
      - Favoritos
      summary: Comprobar favorito
      description: Comprueba si un producto está en la lista de favoritos del usuario
        autenticado
      operationId: isFav
      parameters:
      - name: productoId
        in: path
        description: ID del producto a verificar
        required: true
        schema:
          type: string
        example: 507f191e810c19729de860ea
      responses:
        '200':
          description: Estado del favorito
          content:
            application/json:
              example:
                favorito: true
        '401':
          description: Usuario no autenticado
  /api/facturas/{id}:
    get:
      tags:
      - Facturas
      summary: Obtener factura por id
      operationId: getFactura
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Factura encontrada
        '404':
          description: No encontrada
  /api/facturas/numero/{numero}:
    get:
      tags:
      - Facturas
      summary: Obtener factura por número
      operationId: getPorNumero
      parameters:
      - name: numero
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Factura encontrada
        '404':
          description: No encontrada
  /api/carritos/{id}:
    get:
      tags:
      - Carritos
      summary: Obtener carrito por ID
      description: Devuelve un carrito por su id
      operationId: getById
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Carrito encontrado
        '404':
          description: Carrito no encontrado
    delete:
      tags:
      - Carritos
      summary: Eliminar carrito
      description: Elimina un carrito por id
      operationId: delete_1
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Carrito eliminado
  /api/auth/me:
    get:
      tags:
      - Auth
      summary: Obtener info del usuario actual
      description: Devuelve datos del usuario autenticado
      operationId: me
      responses:
        '200':
          description: Usuario actual
  /api/talleres/{tallerId}/miembros/{memberUserId}:
    delete:
      tags:
      - TallerMiembros
      summary: Remover miembro del taller
      description: Elimina un miembro del taller. Solo puede hacerlo el owner o un
        ADMIN.
      operationId: remove
      parameters:
      - name: tallerId
        in: path
        description: ID del taller
        required: true
        schema:
          type: string
        example: 507f1f77bcf86cd799439777
      - name: memberUserId
        in: path
        description: ID del usuario a remover
        required: true
        schema:
          type: string
        example: 507f1f77bcf86cd799439011
      responses:
        '200':
          description: Miembro removido exitosamente
          content:
            application/json:
              example:
                success: true
                userId: 507f1f77bcf86cd799439011
                message: Miembro removido del taller
        '401':
          description: Usuario no autenticado
        '403':
          description: No tienes permisos para esta operación
        '404':
          description: Taller o miembro no encontrado
  /api/carritos/{id}/items/{productoId}:
    delete:
      tags:
      - Carritos
      summary: Remover item de carrito
      description: Remueve un item del carrito del usuario autenticado
      operationId: removeItem
      parameters:
      - name: id
        in: path
        required: true
        schema:
          type: string
      - name: productoId
        in: path
        required: true
        schema:
          type: string
      responses:
        '200':
          description: Item removido
components:
  schemas:
    ProductoRequest:
      required:
      - nombre
      type: object
      properties:
        idString:
          type: string
        nombre:
          type: string
        descripcion:
          type: string
        precio:
          type: number
          format: double
        stock:
          minimum: 0
          type: integer
          format: int32
        categoriaId:
          type: string
        imagenRecurso:
          type: integer
          format: int32
        listaMedios:
          type: array
          items:
            type: object
            additionalProperties:
              type: object
        specs:
          type: object
          additionalProperties:
            type: string
    CategoriaRequest:
      required:
      - nombre
      type: object
      properties:
        idString:
          type: string
        nombre:
          type: string
        descripcion:
          type: string
        iconoRecurso:
          type: integer
          format: int32
    MovimientoRequest:
      required:
      - cantidad
      - productoId
      - tipo
      type: object
      properties:
        tipo:
          pattern: (?i)^(INGRESO|EGRESO|VENTA|DEVOLUCION|AJUSTE)$
          type: string
        productoId:
          type: string
        cantidad:
          minimum: 1
          type: integer
          format: int32
        referencia:
          type: string
        notas:
          type: string
        realizadoPor:
          pattern: ^[a-fA-F0-9]{24}$
          type: string
        almacenId:
          pattern: ^[a-fA-F0-9]{24}$
          type: string
    ClienteRequest:
      type: object
      properties:
        nombre:
          type: string
        documento:
          type: string
        direccion:
          type: string
    FacturaItemRequest:
      required:
      - cantidad
      - precioUnitario
      - productoId
      type: object
      properties:
        productoId:
          type: string
        cantidad:
          minimum: 1
          type: integer
          format: int32
        precioUnitario:
          type: number
          format: double
    FacturaRequest:
      required:
      - items
      type: object
      properties:
        numeroFactura:
          type: string
        clienteId:
          type: string
        cliente:
          $ref: '#/components/schemas/ClienteRequest'
        items:
          type: array
          items:
            $ref: '#/components/schemas/FacturaItemRequest'
        total:
          type: number
          format: double
        realizadoPor:
          type: string
        estado:
          type: string
    CarritoItemRequest:
      required:
      - cantidad
      - productoId
      type: object
      properties:
        productoId:
          type: string
        cantidad:
          minimum: 1
          type: integer
          format: int32
    CarritoRequest:
      type: object
      properties:
        usuarioId:
          type: string
        items:
          type: array
          items:
            $ref: '#/components/schemas/CarritoItemRequest'
        realizadoPor:
          type: string
    RegisterRequest:
      required:
      - apellido
      - email
      - nombre
      - password
      - username
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          maxLength: 2147483647
          minLength: 8
          type: string
        nombre:
          type: string
        apellido:
          type: string
        inviteCode:
          type: string
    LoginRequest:
      required:
      - password
      - usernameOrEmail
      type: object
      properties:
        usernameOrEmail:
          type: string
        password:
          type: string
        device:
          type: string
    CreateAdminRequest:
      required:
      - apellido
      - email
      - nombre
      - password
      - username
      type: object
      properties:
        username:
          type: string
        email:
          type: string
        password:
          maxLength: 2147483647
          minLength: 8
          type: string
        nombre:
          type: string
        apellido:
          type: string
        roles:
          type: array
          items:
            type: string
        adminKey:
          type: string
  securitySchemes:
    bearerAuth:
      type: http
      description: 'Autenticación con JWT Bearer. Añada el header: Authorization:
        Bearer {token}'
      scheme: bearer
      bearerFormat: JWT
