/* tslint:disable */
/* eslint-disable */
/**
 * Inventario Repuestos API
 * API para autenticación, gestión de talleres, almacenes e invitaciones (code-based).
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface AcceptInvitationRequest
 */
export interface AcceptInvitationRequest {
    /**
     * 
     * @type {string}
     * @memberof AcceptInvitationRequest
     */
    'code'?: string;
}
/**
 * 
 * @export
 * @interface ApiAuthLogoutPostRequest
 */
export interface ApiAuthLogoutPostRequest {
    /**
     * 
     * @type {string}
     * @memberof ApiAuthLogoutPostRequest
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface AuthResponse
 */
export interface AuthResponse {
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthResponse
     */
    'refreshToken'?: string;
    /**
     * 
     * @type {object}
     * @memberof AuthResponse
     */
    'user'?: object;
}
/**
 * 
 * @export
 * @interface CrearAlmacenRequest
 */
export interface CrearAlmacenRequest {
    /**
     * 
     * @type {string}
     * @memberof CrearAlmacenRequest
     */
    'nombre'?: string;
    /**
     * 
     * @type {string}
     * @memberof CrearAlmacenRequest
     */
    'ubicacion'?: string;
}
/**
 * 
 * @export
 * @interface CrearInvitacionRequest
 */
export interface CrearInvitacionRequest {
    /**
     * 
     * @type {string}
     * @memberof CrearInvitacionRequest
     */
    'role'?: string;
    /**
     * 
     * @type {number}
     * @memberof CrearInvitacionRequest
     */
    'daysValid'?: number;
}
/**
 * 
 * @export
 * @interface CrearTallerRequest
 */
export interface CrearTallerRequest {
    /**
     * 
     * @type {string}
     * @memberof CrearTallerRequest
     */
    'nombre'?: string;
}
/**
 * 
 * @export
 * @interface ErrorResponse
 */
export interface ErrorResponse {
    /**
     * 
     * @type {string}
     * @memberof ErrorResponse
     */
    'error'?: string;
}
/**
 * 
 * @export
 * @interface LoginRequest
 */
export interface LoginRequest {
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'usernameOrEmail'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof LoginRequest
     */
    'device'?: string;
}
/**
 * 
 * @export
 * @interface OAuthFacebookRequest
 */
export interface OAuthFacebookRequest {
    /**
     * 
     * @type {string}
     * @memberof OAuthFacebookRequest
     */
    'accessToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthFacebookRequest
     */
    'inviteCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthFacebookRequest
     */
    'device'?: string;
}
/**
 * 
 * @export
 * @interface OAuthGoogleRequest
 */
export interface OAuthGoogleRequest {
    /**
     * 
     * @type {string}
     * @memberof OAuthGoogleRequest
     */
    'idToken'?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthGoogleRequest
     */
    'inviteCode'?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthGoogleRequest
     */
    'device'?: string;
}
/**
 * 
 * @export
 * @interface RefreshRequest
 */
export interface RefreshRequest {
    /**
     * 
     * @type {string}
     * @memberof RefreshRequest
     */
    'refreshToken'?: string;
}
/**
 * 
 * @export
 * @interface RegisterRequest
 */
export interface RegisterRequest {
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'username'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'email'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'password'?: string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'nombre': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'apellido': string;
    /**
     * 
     * @type {string}
     * @memberof RegisterRequest
     */
    'inviteCode'?: string;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Login con username o email + password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost: async (loginRequest: LoginRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loginRequest' is not null or undefined
            assertParamExists('apiAuthLoginPost', 'loginRequest', loginRequest)
            const localVarPath = `/api/auth/login`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(loginRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revocar refresh token
         * @param {ApiAuthLogoutPostRequest} [apiAuthLogoutPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost: async (apiAuthLogoutPostRequest?: ApiAuthLogoutPostRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/logout`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(apiAuthLogoutPostRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login/registro con Facebook access token
         * @param {OAuthFacebookRequest} [oAuthFacebookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthOauthFacebookPost: async (oAuthFacebookRequest?: OAuthFacebookRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/oauth/facebook`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuthFacebookRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Login/registro con Google ID Token
         * @param {OAuthGoogleRequest} [oAuthGoogleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthOauthGooglePost: async (oAuthGoogleRequest?: OAuthGoogleRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/oauth/google`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(oAuthGoogleRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Obtener nuevo access token usando refresh token
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshPost: async (refreshRequest?: RefreshRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/refresh`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(refreshRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Registro de usuario
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost: async (registerRequest: RegisterRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'registerRequest' is not null or undefined
            assertParamExists('apiAuthRegisterPost', 'registerRequest', registerRequest)
            const localVarPath = `/api/auth/register`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(registerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Revocar todos los refresh tokens del usuario autenticado
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRevokeAllPost: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/auth/revoke-all`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Listar talleres del usuario autenticado
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTalleresGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/talleres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Aceptar invitación por código
         * @param {AcceptInvitationRequest} [acceptInvitationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTalleresInvitacionesAcceptPost: async (acceptInvitationRequest?: AcceptInvitationRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/talleres/invitaciones/accept`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(acceptInvitationRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Crear taller (usuario autenticado es propietario)
         * @param {CrearTallerRequest} [crearTallerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTalleresPost: async (crearTallerRequest?: CrearTallerRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/talleres`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(crearTallerRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Crear almacen en taller
         * @param {string} tallerId 
         * @param {CrearAlmacenRequest} [crearAlmacenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTalleresTallerIdAlmacenesPost: async (tallerId: string, crearAlmacenRequest?: CrearAlmacenRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tallerId' is not null or undefined
            assertParamExists('apiTalleresTallerIdAlmacenesPost', 'tallerId', tallerId)
            const localVarPath = `/api/talleres/{tallerId}/almacenes`
                .replace(`{${"tallerId"}}`, encodeURIComponent(String(tallerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(crearAlmacenRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Crear invitación por código para un taller
         * @param {string} tallerId 
         * @param {CrearInvitacionRequest} [crearInvitacionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTalleresTallerIdInvitacionesCodigoPost: async (tallerId: string, crearInvitacionRequest?: CrearInvitacionRequest, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tallerId' is not null or undefined
            assertParamExists('apiTalleresTallerIdInvitacionesCodigoPost', 'tallerId', tallerId)
            const localVarPath = `/api/talleres/{tallerId}/invitaciones/codigo`
                .replace(`{${"tallerId"}}`, encodeURIComponent(String(tallerId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication bearerAuth required
            // http bearer authentication required
            await setBearerAuthToObject(localVarHeaderParameter, configuration)


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(crearInvitacionRequest, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Login con username o email + password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLoginPost(loginRequest: LoginRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLoginPost(loginRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revocar refresh token
         * @param {ApiAuthLogoutPostRequest} [apiAuthLogoutPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthLogoutPost(apiAuthLogoutPostRequest?: ApiAuthLogoutPostRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthLogoutPost(apiAuthLogoutPostRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login/registro con Facebook access token
         * @param {OAuthFacebookRequest} [oAuthFacebookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthOauthFacebookPost(oAuthFacebookRequest?: OAuthFacebookRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthOauthFacebookPost(oAuthFacebookRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Login/registro con Google ID Token
         * @param {OAuthGoogleRequest} [oAuthGoogleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthOauthGooglePost(oAuthGoogleRequest?: OAuthGoogleRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthOauthGooglePost(oAuthGoogleRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Obtener nuevo access token usando refresh token
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRefreshPost(refreshRequest?: RefreshRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRefreshPost(refreshRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Registro de usuario
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRegisterPost(registerRequest: RegisterRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<AuthResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRegisterPost(registerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Revocar todos los refresh tokens del usuario autenticado
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiAuthRevokeAllPost(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiAuthRevokeAllPost(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Listar talleres del usuario autenticado
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTalleresGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTalleresGet(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Aceptar invitación por código
         * @param {AcceptInvitationRequest} [acceptInvitationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTalleresInvitacionesAcceptPost(acceptInvitationRequest?: AcceptInvitationRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTalleresInvitacionesAcceptPost(acceptInvitationRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Crear taller (usuario autenticado es propietario)
         * @param {CrearTallerRequest} [crearTallerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTalleresPost(crearTallerRequest?: CrearTallerRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTalleresPost(crearTallerRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Crear almacen en taller
         * @param {string} tallerId 
         * @param {CrearAlmacenRequest} [crearAlmacenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTalleresTallerIdAlmacenesPost(tallerId: string, crearAlmacenRequest?: CrearAlmacenRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTalleresTallerIdAlmacenesPost(tallerId, crearAlmacenRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Crear invitación por código para un taller
         * @param {string} tallerId 
         * @param {CrearInvitacionRequest} [crearInvitacionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async apiTalleresTallerIdInvitacionesCodigoPost(tallerId: string, crearInvitacionRequest?: CrearInvitacionRequest, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.apiTalleresTallerIdInvitacionesCodigoPost(tallerId, crearInvitacionRequest, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Login con username o email + password
         * @param {LoginRequest} loginRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLoginPost(loginRequest: LoginRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.apiAuthLoginPost(loginRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revocar refresh token
         * @param {ApiAuthLogoutPostRequest} [apiAuthLogoutPostRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthLogoutPost(apiAuthLogoutPostRequest?: ApiAuthLogoutPostRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthLogoutPost(apiAuthLogoutPostRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login/registro con Facebook access token
         * @param {OAuthFacebookRequest} [oAuthFacebookRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthOauthFacebookPost(oAuthFacebookRequest?: OAuthFacebookRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthOauthFacebookPost(oAuthFacebookRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Login/registro con Google ID Token
         * @param {OAuthGoogleRequest} [oAuthGoogleRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthOauthGooglePost(oAuthGoogleRequest?: OAuthGoogleRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthOauthGooglePost(oAuthGoogleRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Obtener nuevo access token usando refresh token
         * @param {RefreshRequest} [refreshRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRefreshPost(refreshRequest?: RefreshRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthRefreshPost(refreshRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Registro de usuario
         * @param {RegisterRequest} registerRequest 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRegisterPost(registerRequest: RegisterRequest, options?: any): AxiosPromise<AuthResponse> {
            return localVarFp.apiAuthRegisterPost(registerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Revocar todos los refresh tokens del usuario autenticado
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiAuthRevokeAllPost(options?: any): AxiosPromise<void> {
            return localVarFp.apiAuthRevokeAllPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Listar talleres del usuario autenticado
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTalleresGet(options?: any): AxiosPromise<void> {
            return localVarFp.apiTalleresGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Aceptar invitación por código
         * @param {AcceptInvitationRequest} [acceptInvitationRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTalleresInvitacionesAcceptPost(acceptInvitationRequest?: AcceptInvitationRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiTalleresInvitacionesAcceptPost(acceptInvitationRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Crear taller (usuario autenticado es propietario)
         * @param {CrearTallerRequest} [crearTallerRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTalleresPost(crearTallerRequest?: CrearTallerRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiTalleresPost(crearTallerRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Crear almacen en taller
         * @param {string} tallerId 
         * @param {CrearAlmacenRequest} [crearAlmacenRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTalleresTallerIdAlmacenesPost(tallerId: string, crearAlmacenRequest?: CrearAlmacenRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiTalleresTallerIdAlmacenesPost(tallerId, crearAlmacenRequest, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Crear invitación por código para un taller
         * @param {string} tallerId 
         * @param {CrearInvitacionRequest} [crearInvitacionRequest] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        apiTalleresTallerIdInvitacionesCodigoPost(tallerId: string, crearInvitacionRequest?: CrearInvitacionRequest, options?: any): AxiosPromise<void> {
            return localVarFp.apiTalleresTallerIdInvitacionesCodigoPost(tallerId, crearInvitacionRequest, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Login con username o email + password
     * @param {LoginRequest} loginRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthLoginPost(loginRequest: LoginRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthLoginPost(loginRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revocar refresh token
     * @param {ApiAuthLogoutPostRequest} [apiAuthLogoutPostRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthLogoutPost(apiAuthLogoutPostRequest?: ApiAuthLogoutPostRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthLogoutPost(apiAuthLogoutPostRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login/registro con Facebook access token
     * @param {OAuthFacebookRequest} [oAuthFacebookRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthOauthFacebookPost(oAuthFacebookRequest?: OAuthFacebookRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthOauthFacebookPost(oAuthFacebookRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Login/registro con Google ID Token
     * @param {OAuthGoogleRequest} [oAuthGoogleRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthOauthGooglePost(oAuthGoogleRequest?: OAuthGoogleRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthOauthGooglePost(oAuthGoogleRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Obtener nuevo access token usando refresh token
     * @param {RefreshRequest} [refreshRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthRefreshPost(refreshRequest?: RefreshRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthRefreshPost(refreshRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Registro de usuario
     * @param {RegisterRequest} registerRequest 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthRegisterPost(registerRequest: RegisterRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthRegisterPost(registerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Revocar todos los refresh tokens del usuario autenticado
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiAuthRevokeAllPost(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiAuthRevokeAllPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Listar talleres del usuario autenticado
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiTalleresGet(options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiTalleresGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Aceptar invitación por código
     * @param {AcceptInvitationRequest} [acceptInvitationRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiTalleresInvitacionesAcceptPost(acceptInvitationRequest?: AcceptInvitationRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiTalleresInvitacionesAcceptPost(acceptInvitationRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Crear taller (usuario autenticado es propietario)
     * @param {CrearTallerRequest} [crearTallerRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiTalleresPost(crearTallerRequest?: CrearTallerRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiTalleresPost(crearTallerRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Crear almacen en taller
     * @param {string} tallerId 
     * @param {CrearAlmacenRequest} [crearAlmacenRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiTalleresTallerIdAlmacenesPost(tallerId: string, crearAlmacenRequest?: CrearAlmacenRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiTalleresTallerIdAlmacenesPost(tallerId, crearAlmacenRequest, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Crear invitación por código para un taller
     * @param {string} tallerId 
     * @param {CrearInvitacionRequest} [crearInvitacionRequest] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public apiTalleresTallerIdInvitacionesCodigoPost(tallerId: string, crearInvitacionRequest?: CrearInvitacionRequest, options?: AxiosRequestConfig) {
        return DefaultApiFp(this.configuration).apiTalleresTallerIdInvitacionesCodigoPost(tallerId, crearInvitacionRequest, options).then((request) => request(this.axios, this.basePath));
    }
}


